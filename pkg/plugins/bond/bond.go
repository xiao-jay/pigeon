package bond

import (
	"fmt"
	"io"
	"log"
	"net/http"
	"pigeon/config"
	"pigeon/pkg/framework"
	"strconv"
	"strings"
	"time"

	"github.com/axgle/mahonia"
	"github.com/robfig/cron/v3"
)

const Name = "bond"

// StockMonitor ËÇ°Á•®ÁõëÊéßÂô®
type StockMonitor struct {
	stocks map[string]*StockInfo
	Cron   string `json:"cron"`
}

// StockInfo ËÇ°Á•®‰ø°ÊÅØ
type StockInfo struct {
	Name       string
	AlertPrice float64
}

// StockData ÂÆûÊó∂ËÇ°Á•®Êï∞ÊçÆ
type StockData struct {
	Name  string
	Price float64
	Time  string
}

func New(arguments config.Arguments) framework.Plugin {
	// log.Println("bond plugin init", Arguments)

	sm := &StockMonitor{
		Cron:   arguments["cron"].(string),
		stocks: make(map[string]*StockInfo),
	}

	bondList := arguments["bonds"].([]interface{})
	for _, bondItem := range bondList {
		bond := bondItem.(map[interface{}]interface{})
		code := bond["code"].(string)

		sm.stocks[code] = &StockInfo{
			Name:       bond["name"].(string),
			AlertPrice: bond["price"].(float64),
		}
	}

	return sm
}

func (sm StockMonitor) Name() string {
	return Name
}

// SendMessage send msg to channel
func (sm StockMonitor) SendMessage(bindMsg interface{}, Msg chan config.Msg) error {
	msgjson := bindMsg.(string)
	msg := config.Msg{
		Title:       Name,
		Description: msgjson,
		Channel:     9,
	}

	Msg <- msg
	return nil
}

func (sm StockMonitor) Run(Msg chan config.Msg, config config.Config, c *cron.Cron) error {
	_, err := c.AddFunc(sm.Cron, func() {
		log.Printf("%s ÂºÄÂßãÊâßË°å‰ªªÂä°", Name)
		msg := sm.CheckAlerts()
		if msg == "" {
			log.Println("no need bond remainder")
			return
		}
		if err := sm.SendMessage(msg, Msg); err != nil {
			log.Println(err)
		}
	})
	if err != nil {
		return err
	}
	return nil
}

// NewStockMonitor ÂàõÂª∫Êñ∞ÁöÑËÇ°Á•®ÁõëÊéßÂô®
func NewStockMonitor() *StockMonitor {
	return &StockMonitor{
		stocks: make(map[string]*StockInfo),
	}
}

// AddStockAlert Ê∑ªÂä†ËÇ°Á•®ÊèêÈÜí
func (sm *StockMonitor) AddStockAlert(stockCode string, alertPrice float64, stockName string) {
	sm.stocks[stockCode] = &StockInfo{
		Name:       stockName,
		AlertPrice: alertPrice,
	}
	fmt.Printf("‚úÖ Â∑≤Ê∑ªÂä†ÁõëÊéß: %s(%s), ÊèêÈÜí‰ª∑Ê†º: %.2fÂÖÉ\n", stockName, stockCode, alertPrice)
}

// GetStockPrice Ëé∑ÂèñËÇ°Á•®ÂÆûÊó∂‰ª∑Ê†ºÔºàÊñ∞Êµ™Ë¥¢ÁªèAPIÔºâ
func (sm *StockMonitor) GetStockPrice(stockCode string) (*StockData, error) {
	// ÊûÑÈÄ†ËÇ°Á•®‰ª£Á†Å
	var code string
	if strings.HasPrefix(stockCode, "6") {
		code = "sh" + stockCode
	} else {
		code = "sz" + stockCode
	}

	// ÊûÑÂª∫ËØ∑Ê±ÇURL
	url := fmt.Sprintf("http://hq.sinajs.cn/list=%s", code)

	// ÂàõÂª∫HTTPÂÆ¢Êà∑Á´Ø
	client := &http.Client{Timeout: 10 * time.Second}

	// ÂàõÂª∫ËØ∑Ê±Ç
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}

	// ËÆæÁΩÆËØ∑Ê±ÇÂ§¥
	req.Header.Set("Referer", "http://finance.sina.com.cn/")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")

	// ÂèëÈÄÅËØ∑Ê±Ç
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	// ËØªÂèñÂìçÂ∫îÊï∞ÊçÆ
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	// Ëß£ÊûêÊï∞ÊçÆ
	// Êï∞ÊçÆÊ†ºÂºè: var hq_str_sh600000="Êµ¶ÂèëÈì∂Ë°å,12.35,12.36,...";
	// Â∞Ü GBK ÁºñÁ†ÅËΩ¨Êç¢‰∏∫ UTF-8
	decoder := mahonia.NewDecoder("gbk")
	if decoder == nil {
		return nil, fmt.Errorf("‰∏çÊîØÊåÅÁöÑÁºñÁ†Å: gbk")
	}

	dataStr := decoder.ConvertString(string(body))
	start := strings.Index(dataStr, `="`)
	end := strings.Index(dataStr, `";`)

	if start == -1 || end == -1 {
		return nil, fmt.Errorf("Êó†ÊïàÁöÑÂìçÂ∫îÊï∞ÊçÆ")
	}

	stockInfo := dataStr[start+2 : end]
	fields := strings.Split(stockInfo, ",")
	if len(fields) < 3 {
		return nil, fmt.Errorf("Êï∞ÊçÆÊ†ºÂºèÈîôËØØ")
	}

	// Ëß£ÊûêÂΩìÂâç‰ª∑Ê†ºÔºàÁ¨¨3‰∏™Â≠óÊÆµÔºâ
	currentPrice, err := strconv.ParseFloat(fields[3], 64)
	if err != nil {
		return nil, fmt.Errorf("Ëß£Êûê‰ª∑Ê†ºÂ§±Ë¥•: %v", err)
	}

	return &StockData{
		Name:  fields[0],
		Price: currentPrice,
		Time:  time.Now().Format("2006-01-02 15:04:05"),
	}, nil
}

// CheckAlerts Ê£ÄÊü•ÊâÄÊúâËÇ°Á•®ÊèêÈÜí
func (sm *StockMonitor) CheckAlerts() string {
	log.Printf("\nüìä %s Ê£ÄÊü•ËÇ°Á•®‰ª∑Ê†º...\n", time.Now().Format("15:04:05"))
	var msgs string
	for stockCode, stockInfo := range sm.stocks {
		stockData, err := sm.GetStockPrice(stockCode)
		if err != nil {
			log.Printf("‚ùå Ëé∑Âèñ %s(%s) ‰ª∑Ê†ºÂ§±Ë¥•: %v\n", stockInfo.Name, stockCode, err)
			continue
		}

		log.Printf("   %s(%s): %.2fÂÖÉ\n", stockData.Name, stockCode, stockData.Price)

		// Ê£ÄÊü•ÊòØÂê¶ËææÂà∞ÊèêÈÜíÊù°‰ª∂
		if stockData.Price <= stockInfo.AlertPrice {
			msgs += sm.sendAlert(stockData, stockCode, stockInfo.AlertPrice) + "\n\n"
		}

		// ÈÅøÂÖçËØ∑Ê±ÇËøá‰∫éÈ¢ëÁπÅ
		time.Sleep(1 * time.Second)
	}
	return msgs
}

// sendAlert ÂèëÈÄÅÊèêÈÜí
func (sm *StockMonitor) sendAlert(stockData *StockData, stockCode string, alertPrice float64) string {
	// priceStr := fmt.Sprintf("%.2f", stockData.Price)
	// alertPriceStr := fmt.Sprintf("%.2f", alertPrice)
	// msg := strings.Repeat("=", 50) + "\n\n" + "üö® ËÇ°Á•®: " + stockData.Name + "(" + stockCode + ")" + "\n\n" + "üö® ÂΩìÂâç‰ª∑Ê†º:" + string(priceStr) + "\n\n" + "üö® Â∑≤‰Ωé‰∫éËÆæÂÆö‰ª∑Ê†º: " + string(alertPriceStr) + "\n\n" + strings.Repeat("=", 50)
	msg := fmt.Sprintf(
		"üö®%süö®\n\nüö® ËÇ°Á•®‰ª∑Ê†ºÊèêÈÜí!\n\nüö® ËÇ°Á•®: %s(%s)\n\nüö® ÂΩìÂâç‰ª∑Ê†º: %.2fÂÖÉ\n\nüö® Â∑≤‰Ωé‰∫éËÆæÂÆö‰ª∑Ê†º: %.2fÂÖÉ\n\nüö® Êó∂Èó¥: %s\n\nüö®%süö®",
		strings.Repeat("=", 50),
		stockData.Name, stockCode,
		stockData.Price,
		alertPrice,
		stockData.Time,
		strings.Repeat("=", 50),
	)

	// ÂêåÊó∂ÊâìÂç∞Âà∞ÊéßÂà∂Âè∞
	log.Println(msg)

	return msg
}

// StartMonitoring ÂºÄÂßãÁõëÊéß
func (sm *StockMonitor) StartMonitoring(interval time.Duration) {
	fmt.Printf("üéØ ÂºÄÂßãÁõëÊéßËÇ°Á•®‰ª∑Ê†ºÔºåÊ£ÄÊü•Èó¥Èöî: %v\n", interval)
	fmt.Println("Êåâ Ctrl+C ÂÅúÊ≠¢ÁõëÊéß")

	ticker := time.NewTicker(interval)
	defer ticker.Stop()

	for range ticker.C {
		sm.CheckAlerts()
	}
}

func main() {
	// ÂàõÂª∫ËÇ°Á•®ÁõëÊéßÂô®
	monitor := NewStockMonitor()

	// Ê∑ªÂä†Ë¶ÅÁõëÊéßÁöÑËÇ°Á•®
	// ÂèÇÊï∞ÔºöËÇ°Á•®‰ª£Á†Å, ÊèêÈÜí‰ª∑Ê†º, ËÇ°Á•®ÂêçÁß∞
	monitor.AddStockAlert("000001", 100.5, "Âπ≥ÂÆâÈì∂Ë°å")
	monitor.AddStockAlert("600036", 300.0, "ÊãõÂïÜÈì∂Ë°å")
	monitor.AddStockAlert("000858", 150.0, "‰∫îÁ≤ÆÊ∂≤")
	monitor.AddStockAlert("600519", 16000.0, "Ë¥µÂ∑ûËåÖÂè∞")

	// ÂºÄÂßãÁõëÊéßÔºåÊØè30ÁßíÊ£ÄÊü•‰∏ÄÊ¨°
	monitor.StartMonitoring(2 * time.Second)
}
